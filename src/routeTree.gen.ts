/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users/route'
import { Route as DashboardUsersListImport } from './routes/dashboard/users/list'
import { Route as DashboardUsersAddImport } from './routes/dashboard/users/add'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsersRouteRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardUsersListRoute = DashboardUsersListImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => DashboardUsersRouteRoute,
} as any)

const DashboardUsersAddRoute = DashboardUsersAddImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => DashboardUsersRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/users/add': {
      id: '/dashboard/users/add'
      path: '/add'
      fullPath: '/dashboard/users/add'
      preLoaderRoute: typeof DashboardUsersAddImport
      parentRoute: typeof DashboardUsersRouteImport
    }
    '/dashboard/users/list': {
      id: '/dashboard/users/list'
      path: '/list'
      fullPath: '/dashboard/users/list'
      preLoaderRoute: typeof DashboardUsersListImport
      parentRoute: typeof DashboardUsersRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardUsersRouteRouteChildren {
  DashboardUsersAddRoute: typeof DashboardUsersAddRoute
  DashboardUsersListRoute: typeof DashboardUsersListRoute
}

const DashboardUsersRouteRouteChildren: DashboardUsersRouteRouteChildren = {
  DashboardUsersAddRoute: DashboardUsersAddRoute,
  DashboardUsersListRoute: DashboardUsersListRoute,
}

const DashboardUsersRouteRouteWithChildren =
  DashboardUsersRouteRoute._addFileChildren(DashboardUsersRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardUsersRouteRoute: typeof DashboardUsersRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardUsersRouteRoute: DashboardUsersRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/users/add': typeof DashboardUsersAddRoute
  '/dashboard/users/list': typeof DashboardUsersListRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/users/add': typeof DashboardUsersAddRoute
  '/dashboard/users/list': typeof DashboardUsersListRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/users/add': typeof DashboardUsersAddRoute
  '/dashboard/users/list': typeof DashboardUsersListRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/users'
    | '/demo/tanstack-query'
    | '/dashboard/'
    | '/dashboard/users/add'
    | '/dashboard/users/list'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/users'
    | '/demo/tanstack-query'
    | '/dashboard'
    | '/dashboard/users/add'
    | '/dashboard/users/list'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/users'
    | '/demo/tanstack-query'
    | '/dashboard/'
    | '/dashboard/users/add'
    | '/dashboard/users/list'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/users",
        "/dashboard/"
      ]
    },
    "/dashboard/users": {
      "filePath": "dashboard/users/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/users/add",
        "/dashboard/users/list"
      ]
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users/add": {
      "filePath": "dashboard/users/add.tsx",
      "parent": "/dashboard/users"
    },
    "/dashboard/users/list": {
      "filePath": "dashboard/users/list.tsx",
      "parent": "/dashboard/users"
    }
  }
}
ROUTE_MANIFEST_END */
